//Nabeeha Khan
//22301304
//CS223 Lab 04
////////////////////////////////////////////////////////////

`timescale 1ns / 1ps


//Module for flip flop
module dflipflop( input logic clk, reset, d, output logic q); 
    always_ff @(posedge clk)  
    begin 
        if (reset)   q <= 1'b0; 
        else 	     q <= d; 
    end 
endmodule 

//Module for 4 to 1 mux
module mux4to1(input logic I0, I1, I2, I3, S0, S1, output logic Y);
    logic l0, l1;
    assign l0 = (~S0 & I0) | (S0 & I1);
    assign l1 = (~S0 & I2) | (S0 & I3);
    assign Y = (~S1 & l0) | (S1 & l1);
endmodule

//Module for clock cycle
module clock_cycle(
    input logic clk,
    output logic clk_div
    );
    
    localparam constantNumber = 25000000;
    logic [31:0] count;
    
    always @(posedge(clk))
    begin
    if (count == constantNumber - 1)
            count <= 32'b0;
        else
            count <= count + 1;
    end
    
    always @ (posedge(clk))
    begin
        if (count == constantNumber - 1)
            clk_div <= ~clk_div;
        else
            clk_div <= clk_div;
    end
endmodule


//Module for register
module multifunctionReg(input logic d0, d1, d2, d3, S0, S1, shiftin, clk, reset, output logic q3, q2, q1, q0); 
    logic l0, l1, l2, l3, clk1;
    
    clock_cycle clkDiv(clk,clk1);
    
    mux4to1 mux1(q3, q2, shiftin, d3, S0, S1, l3); 
    mux4to1 mux2(q2, q1, q3, d2, S0, S1, l2); 
    mux4to1 mux3(q1, q0, q2, d1, S0, S1, l1); 
    mux4to1 mux4(q0, shiftin, q1, d0, S0, S1, l0); 
    
    dflipflop dff1(clk1, reset, l3, q3); 
    dflipflop dff2(clk1, reset, l2, q2); 
    dflipflop dff3(clk1, reset, l1, q1); 
    dflipflop dff4(clk1, reset, l0, q0); 
endmodule 

//Testbench
module multifunctionReg_TB();
    logic d0, d1, d2, d3, S0, S1, shiftin, clk, reset, q3, q2, q1, q0; 
    multifunctionReg dut(d0, d1, d2, d3, S0, S1, shiftin, clk, reset, q3, q2, q1, q0);     
    //Initial clock 
    initial begin 
        clk = 0; 
        forever #5 clk = ~clk;  
    end 

    initial begin    
        //Reseting the flip-flops 
        reset = 1; S1 = 0; S0 = 0; shiftin = 0; d3 = 0; d2 = 0; d1 = 0; d0 = 0; #20; 
        //Case 1: maintain current value 
        reset = 0; S1 = 0; S0 = 0; shiftin = 0; d3 = 1; d2 = 1; d1 = 1; d0 = 1; #10; 
        //Case 2: left shift 
        reset = 0; S1 = 0; S0 = 1; shiftin = 0; d3 = 0; d2 = 0; d1 = 0; d0 = 0; #10; 
        reset = 0; S1 = 0; S0 = 1; shiftin = 1; d3 = 0; d2 = 0; d1 = 0; d0 = 0; #10; 
        //Case 3: right shift 
        reset = 0; S1 = 1; S0 = 0; shiftin = 0; d3 = 0; d2 = 0; d1 = 0; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 0; shiftin = 1; d3 = 0; d2 = 0; d1 = 0; d0 = 0; #10; 
        //Case 4: Parallel load 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 0; d1 = 0; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 0; d1 = 0; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 0; d1 = 1; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 0; d1 = 1; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 1; d1 = 0; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 1; d1 = 0; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 1; d1 = 1; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 0; d2 = 1; d1 = 1; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 0; d1 = 0; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 0; d1 = 0; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 0; d1 = 1; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 0; d1 = 1; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 1; d1 = 0; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 1; d1 = 0; d0 = 1; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 1; d1 = 1; d0 = 0; #10; 
        reset = 0; S1 = 1; S0 = 1; shiftin = 0; d3 = 1; d2 = 1; d1 = 1; d0 = 1; #10; 
    end 
endmodule


##Constraints for multifunction register
# Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]							
set_property IOSTANDARD LVCMOS33 [get_ports clk]
create_clock -name clk100MHz -period 10.0 [get_ports clk]

# Switches
set_property -dict {PACKAGE_PIN V17 IOSTANDARD LVCMOS33 } [get_ports {d0}]					
set_property -dict {PACKAGE_PIN V16 IOSTANDARD LVCMOS33 } [get_ports {d1}]					
set_property -dict {PACKAGE_PIN W16 IOSTANDARD LVCMOS33 } [get_ports {d2}]					
set_property -dict {PACKAGE_PIN W17 IOSTANDARD LVCMOS33 } [get_ports {d3}]					
set_property -dict {PACKAGE_PIN V15 IOSTANDARD LVCMOS33 } [get_ports {S0}]					
set_property -dict {PACKAGE_PIN W14 IOSTANDARD LVCMOS33 } [get_ports {S1}]					
set_property -dict {PACKAGE_PIN W13 IOSTANDARD LVCMOS33 } [get_ports {shiftin}]					
set_property -dict {PACKAGE_PIN V2 IOSTANDARD LVCMOS33 } [get_ports {reset}]					
			 
 
# LEDs
set_property -dict {PACKAGE_PIN U16 IOSTANDARD LVCMOS33 } [get_ports {q0}]					
set_property -dict {PACKAGE_PIN E19 IOSTANDARD LVCMOS33 } [get_ports {q1}]					
set_property -dict {PACKAGE_PIN U19 IOSTANDARD LVCMOS33 } [get_ports {q2}]					
set_property -dict {PACKAGE_PIN V19 IOSTANDARD LVCMOS33 } [get_ports {q3}]					
									
//////////////////////////////////////////////////////////////////////////				
	
//Module for 7 segment display
module hexto7segment (input logic [3:0] hex, output logic [6:0] segments);
    always_comb begin
        case (hex)
        4'b0000: segments = 7'b1000000;
        4'b0001: segments = 7'b1111001;
        4'b0010: segments = 7'b0100100;
        4'b0011: segments = 7'b0110000;
        4'b0100: segments = 7'b0011001;
        4'b0101: segments = 7'b0010010;
        4'b0110: segments = 7'b0000010;
        4'b0111: segments = 7'b1111000;
        4'b1000: segments = 7'b0000000;
        4'b1001: segments = 7'b0010000;
        4'b1010: segments = 7'b0001000;
        4'b1011: segments = 7'b0000011;
        4'b1100: segments = 7'b1000110;
        4'b1101: segments = 7'b0100001;
        4'b1110: segments = 7'b0000110;
        4'b1111: segments = 7'b0001110;
        default: segments = 7'b1111111; // Default all off
    endcase
    end
endmodule

//Module for 4 digit display
module multiDigitDisplay(input logic clk, input reg [15:0] in, output reg [6:0] seg, output reg [3:0] an);
    reg [1:0] active = 0;
    integer refreshCount = 0;
    wire [6:0] seg0, seg1, seg2, seg3;
    
    hexto7segment converter0(in[3:0], seg0);
    hexto7segment converter1(in[7:4], seg1);
    hexto7segment converter2(in[11:8], seg2);
    hexto7segment converter3(in[15:12], seg3);

    always @(posedge clk) begin
        refreshCount <= refreshCount + 1;
        if (refreshCount == 250000) begin
            refreshCount <= 0;
            active <= active + 1;
            if (active == 3) active <= 0;
        end
    end

always @(*)  begin
        case (active)
            2'b00: begin
                seg = seg0;
                an = 4'b1110;
            end
            2'b01: begin
                seg = seg1;
                an = 4'b1101;
            end
            2'b10: begin
                seg = seg2;
                an = 4'b1011;
            end
            2'b11: begin
                seg = seg3;
                an = 4'b0111;
            end
            default: begin
                seg = 8'b11111111;
                an = 4'b1111;
            end
        endcase
    end
    
endmodule

//Testbench
module multiDigitDisplay_TB();

    // Testbench variables
    logic clk;
    logic [15:0] in;
    wire [6:0] seg;
    wire [3:0] an;

    // Instantiate the multiDigitDisplay module
    multiDigitDisplay uut (
        .clk(clk),
        .in(in),
        .seg(seg),
        .an(an)
    );

    // Clock generation
    initial clk = 0;
    always #5 clk = ~clk; // 100 MHz clock

    // Stimulus process
    initial begin
        // Test case 1: Display all zeros
        in = 16'h0000;
        #100;

        // Test case 2: Display incremental digits
        in = 16'h1234;
        #100;

        // Test case 3: Display mixed values
        in = 16'h9ABC;
        #100;

        // Test case 4: Display all Fs
        in = 16'hFFFF;
        #100;

        // Test case 5: Single digit 0x1
        in = 16'h0001;
        #100;

        // Test case 6: Single digit 0xF
        in = 16'h000F;
        #100;

        // Test case 7: Alternating pattern
        in = 16'h5A5A;
        #100;

        // Test case 8: Edge case of 0x8000
        in = 16'h8000;
        #100;

        // Test case 9: Random pattern
        in = 16'h3C2D;
        #100;

        // Test case 10: Display all ones
        in = 16'h1111;
        #100;

        // Finish simulation
        $finish;
    end

endmodule


##Constraints for multidigit display
# Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]							
set_property IOSTANDARD LVCMOS33 [get_ports clk]
create_clock -name clk100MHz -period 10.0 [get_ports clk]

# Switches
set_property -dict {PACKAGE_PIN V17 IOSTANDARD LVCMOS33 } [get_ports {in[0]}]					
set_property -dict {PACKAGE_PIN V16 IOSTANDARD LVCMOS33 } [get_ports {in[1]}]					
set_property -dict {PACKAGE_PIN W16 IOSTANDARD LVCMOS33 } [get_ports {in[2]}]					
set_property -dict {PACKAGE_PIN W17 IOSTANDARD LVCMOS33 } [get_ports {in[3]}]					
set_property -dict {PACKAGE_PIN W15 IOSTANDARD LVCMOS33 } [get_ports {in[4]}]					
set_property -dict {PACKAGE_PIN V15 IOSTANDARD LVCMOS33 } [get_ports {in[5]}]					
set_property -dict {PACKAGE_PIN W14 IOSTANDARD LVCMOS33 } [get_ports {in[6]}]					
set_property -dict {PACKAGE_PIN W13 IOSTANDARD LVCMOS33 } [get_ports {in[7]}]					
set_property -dict {PACKAGE_PIN V2 IOSTANDARD LVCMOS33 } [get_ports {in[8]}]					
set_property -dict {PACKAGE_PIN T3 IOSTANDARD LVCMOS33 } [get_ports {in[9]}]					
set_property -dict {PACKAGE_PIN T2 IOSTANDARD LVCMOS33 } [get_ports {in[10]}]					
set_property -dict {PACKAGE_PIN R3 IOSTANDARD LVCMOS33 } [get_ports {in[11]}]					
set_property -dict {PACKAGE_PIN W2 IOSTANDARD LVCMOS33 } [get_ports {in[12]}]					
set_property -dict {PACKAGE_PIN U1 IOSTANDARD LVCMOS33 } [get_ports {in[13]}]					
set_property -dict {PACKAGE_PIN T1 IOSTANDARD LVCMOS33 } [get_ports {in[14]}]					
set_property -dict {PACKAGE_PIN R2 IOSTANDARD LVCMOS33 } [get_ports {in[15]}]					
					
#7 segment display
set_property -dict {PACKAGE_PIN W7 IOSTANDARD LVCMOS33 } [get_ports {seg[0]}]					
set_property -dict {PACKAGE_PIN W6 IOSTANDARD LVCMOS33 } [get_ports {seg[1]}]					
set_property -dict {PACKAGE_PIN U8 IOSTANDARD LVCMOS33 } [get_ports {seg[2]}]					
set_property -dict {PACKAGE_PIN V8 IOSTANDARD LVCMOS33 } [get_ports {seg[3]}]					
set_property -dict {PACKAGE_PIN U5 IOSTANDARD LVCMOS33 } [get_ports {seg[4]}]					
set_property -dict {PACKAGE_PIN V5 IOSTANDARD LVCMOS33 } [get_ports {seg[5]}]					
set_property -dict {PACKAGE_PIN U7 IOSTANDARD LVCMOS33 } [get_ports {seg[6]}]

set_property -dict {PACKAGE_PIN U2 IOSTANDARD LVCMOS33 } [get_ports {an[0]}]					
set_property -dict {PACKAGE_PIN U4 IOSTANDARD LVCMOS33 } [get_ports {an[1]}]					
set_property -dict {PACKAGE_PIN V4 IOSTANDARD LVCMOS33 } [get_ports {an[2]}]					
set_property -dict {PACKAGE_PIN W4 IOSTANDARD LVCMOS33 } [get_ports {an[3]}]

//////////////////////////////////////////////////////////////////////////

//Module for lab counter with alarm
module CounterAlarm( 
    input reg [1:0] state, input reg [11:0] in, input logic reset, clk, 
    output reg [6:0] seg, output reg [3:0] an, output logic alarm 
    ); 
    reg [15:0] q; 
    reg [3:0] shift; 
    logic isOverflow, resettemp, msb;    
    logic [15:0] alarmCheck = 16'h0518;  
    assign msb = q[15];      

    // Shift logic 
    always_comb begin 
        case (state) 
            2'b01: shift = {q[11], q[7], q[3], 1'b0}; // Left shift 
            2'b10: shift = {1'b0, q[12], q[8], q[4]}; // Right shift 
            default: shift = 4'b0; // Hold or reset 
        endcase 
    end        

    //assign isOverflow = q[15] && state == 2'b01;      

    //Setting registers 
    multifunctionReg bit3(1'b0, 1'b0, 1'b0, 1'b0, state[0], state[1],shift[3], clk, resettemp, q[15], q[14], q[13], q[12]); 
    multifunctionReg bit2(in[8], in[9], in[10], in[11], state[0], state[1],shift[2], clk, resettemp, q[11], q[10], q[9], q[8]); 
    multifunctionReg bit1(in[4], in[5], in[6], in[7], state[0], state[1],shift[1],clk, resettemp, q[7], q[6], q[5], q[4]); 
    multifunctionReg bit0(in[0], in[1], in[2], in[3], state[0], state[1], shift[0],clk, resettemp, q[3], q[2], q[1], q[0]); 
     

     // Overflow detection 
    always_ff @(posedge clk) begin 
        if (reset) 
            isOverflow <= 0; 
        else 
            isOverflow <= msb && (state == 2'b01); 
    end      

     // Reset logic 
    always_ff @(posedge clk) begin 
        if (reset) 
            resettemp <= 1; 
        else 
            resettemp <= isOverflow ? 1 : 0; 
    end 

    //Displaying the value 
    multiDigitDisplay display(clk, q, seg, an); 
   
    logic clk_slow;
    
    clock_cycle slow(clk, clk_slow);
     
    //Alarm 
    always_ff @(posedge clk_slow) begin 
        if(reset)   alarm <= 0; 
        else if(q > alarmCheck)  alarm <= ~alarm; 
        else alarm <= 0; 
    end 

endmodule 


##Constraints for lab counter 
# Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]							
set_property IOSTANDARD LVCMOS33 [get_ports clk]
create_clock -name clk100MHz -period 10.0 [get_ports clk]

# Switches
set_property -dict {PACKAGE_PIN V17 IOSTANDARD LVCMOS33 } [get_ports {in[0]}]					
set_property -dict {PACKAGE_PIN V16 IOSTANDARD LVCMOS33 } [get_ports {in[1]}]					
set_property -dict {PACKAGE_PIN W16 IOSTANDARD LVCMOS33 } [get_ports {in[2]}]					
set_property -dict {PACKAGE_PIN W17 IOSTANDARD LVCMOS33 } [get_ports {in[3]}]					
set_property -dict {PACKAGE_PIN W15 IOSTANDARD LVCMOS33 } [get_ports {in[4]}]					
set_property -dict {PACKAGE_PIN V15 IOSTANDARD LVCMOS33 } [get_ports {in[5]}]					
set_property -dict {PACKAGE_PIN W14 IOSTANDARD LVCMOS33 } [get_ports {in[6]}]					
set_property -dict {PACKAGE_PIN W13 IOSTANDARD LVCMOS33 } [get_ports {in[7]}]					
set_property -dict {PACKAGE_PIN V2 IOSTANDARD LVCMOS33 } [get_ports {in[8]}]					
set_property -dict {PACKAGE_PIN T3 IOSTANDARD LVCMOS33 } [get_ports {in[9]}]					
set_property -dict {PACKAGE_PIN T2 IOSTANDARD LVCMOS33 } [get_ports {in[10]}]					
set_property -dict {PACKAGE_PIN R3 IOSTANDARD LVCMOS33 } [get_ports {in[11]}]					
#set_property -dict {PACKAGE_PIN W2 IOSTANDARD LVCMOS33 } [get_ports {in[12]}]					
set_property -dict {PACKAGE_PIN U1 IOSTANDARD LVCMOS33 } [get_ports {state[0]}]					
set_property -dict {PACKAGE_PIN T1 IOSTANDARD LVCMOS33 } [get_ports {state[1]}]					
set_property -dict {PACKAGE_PIN R2 IOSTANDARD LVCMOS33 } [get_ports {reset}]					
 
# LEDs
set_property -dict {PACKAGE_PIN U16 IOSTANDARD LVCMOS33 } [get_ports {alarm}]					
	
#7 segment display
set_property -dict {PACKAGE_PIN W7 IOSTANDARD LVCMOS33 } [get_ports {seg[0]}]					
set_property -dict {PACKAGE_PIN W6 IOSTANDARD LVCMOS33 } [get_ports {seg[1]}]					
set_property -dict {PACKAGE_PIN U8 IOSTANDARD LVCMOS33 } [get_ports {seg[2]}]					
set_property -dict {PACKAGE_PIN V8 IOSTANDARD LVCMOS33 } [get_ports {seg[3]}]					
set_property -dict {PACKAGE_PIN U5 IOSTANDARD LVCMOS33 } [get_ports {seg[4]}]					
set_property -dict {PACKAGE_PIN V5 IOSTANDARD LVCMOS33 } [get_ports {seg[5]}]					
set_property -dict {PACKAGE_PIN U7 IOSTANDARD LVCMOS33 } [get_ports {seg[6]}]

set_property -dict {PACKAGE_PIN U2 IOSTANDARD LVCMOS33 } [get_ports {an[0]}]					
set_property -dict {PACKAGE_PIN U4 IOSTANDARD LVCMOS33 } [get_ports {an[1]}]					
set_property -dict {PACKAGE_PIN V4 IOSTANDARD LVCMOS33 } [get_ports {an[2]}]					
set_property -dict {PACKAGE_PIN W4 IOSTANDARD LVCMOS33 } [get_ports {an[3]}]



